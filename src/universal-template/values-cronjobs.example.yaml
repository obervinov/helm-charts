# An example of a fully described value file for describing the simplest cornjob
---
# Description of the cronjob
cronjobs:
  - name: cronjob-example
    image:
      # Image Link
      repository: group/image-cronjob
      version: "1.0.0"
      # Secret name with dockerconfig (for private registry)
      pullsecrets: secret-registry-user
      # `IfNotPresent` - only if the image is missing locally
      # `Always` - the image is pumped out every time the hearth is started
      # `Never` - it is never pumped out, only local images
      imagePullPolicy: IfNotPresent
    # Redefine resource quotas
    resources:
      requests:
        memory: "256Mi"
        cpu: "250m"
      limits:
        memory: "512Mi"
        cpu: "500m"
    # If it is necessary to predefine or replace the commands/arguments
    commands:
      - sh
    args:
      - -c
      - env
    # Container environment variables
    envs:
      LOG_LEVEL: info
    # Environment variables to extract from the secret
    envsSecret: []
    #  - name: SECRET_USERNAME
    #    keySecret: username
    # Sheduling plan (as in the crown)
    schedule: "* * * * *"
    # Storing the history of jobs completed with an error
    failedJobsHistoryLimit: 1
    # Storing the history of jobs completed successfully
    successfulJobsHistoryLimit: 0
    # The policy of restarting jobs if the pod failed with an error
    # Default `Never``
    restartPolicy: "OnFailure"
    # The time (sec) after which completed (success/faild) jobs will be cleared
    # Default: 360
    ttlSecondsAfterFinished: 360
    # The time (in seconds) after which the job will be forcibly terminated
    # Default: 600
    activeDeadlineSeconds: 650
    # The number of attempts to restart the job, if it failed with an error
    # Default: 3
    backoffLimit: 1
    # Policy of simultaneous launch of instances of jobs
    # Allow, Forbid, Replace
    # Default: "Forbid"
    concurrencyPolicy: "Forbid"
    # Allowed number of jobs running at the same time
    parallelism: 1
    # The number of pods that must end with success in order
    # for the job to be considered Complete
    # Default: 1
    completions: 1
    # Redefine the affinity of the pod
    affinity: {}
    # nodeAffinity:
    #   requiredDuringSchedulingIgnoredDuringExecution:
    #     nodeSelectorTerms:
    #       - matchExpressions:
    #           - key: kubernetes.io/e2e-az-name
    #             operator: In
    #             values:
    #               - e2e-az1
    #               - e2e-az2
    # Redefine the nodeSelector of the pod
    nodeSelector: {}
    # Redefine the tolerations of the pod
    tolerations: []

    # Description of the ConfigMap
    configmap:
      # The contents of the config can be set via
      # `--set-file "cronjobs[0].configmap[0].data"="config.json"`
      # `mountPath` - the path in the container where all configs will be mapped
      # `files[0].name` - the name of the file in the container
      # `files[0].data` - the config body is set via the --set-file parameter
      mountPath: "/configs"
      files:
        - name: "config.json"
          data: {}

    # Description of the Secret
    secret: {}
