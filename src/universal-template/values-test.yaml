---
applications:
  - name: statefulset-app
    app:
      type: statefulset
      replicas: 1
      extraLabels:
        app.kubernetes.io/instance: "statefulset-app"
      extraAnnotations:
        checksum/values.yaml: "helm/values.yaml"
      networkPolicy:
        policyTypes:
          - Ingress
          - Egress
        ingress:
          - from:
              - podSelector:
                  matchLabels:
                    app: my-app
            ports:
              - protocol: TCP
                port: 80
        egress:
          - to:
              - podSelector:
                  matchLabels:
                    app: my-app
            ports:
              - protocol: TCP
                port: 80
      containers:
        - name: container1
          image:
            repository: "my-registry/app1"
            tag: "1.0.0"
            pullPolicy: IfNotPresent
            pullSecrets:
              - my-secret
            commands:
              - bash
            args:
              - -c
              - env
          envs:
            - name: LOG_LEVEL
              value: INFO
            - name: SECRET_USERNAME
              valueFrom:
                secretKeyRef:
                  name: my-secret
                  key: username
            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          securityContext:
            capabilities:
              add:
                - IPC_LOCK
          resources:
            requests:
              memory: "256Mi"
              cpu: "250m"
            limits:
              memory: "512Mi"
              cpu: "500m"
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
        - name: container2
          image:
            repository: "my-registry/app2"
            tag: "1.0.0"
            pullPolicy: IfNotPresent
            pullSecrets:
              - my-secret
          envs:
            - name: LOG_LEVEL
              value: INFO
          resources:
            requests:
              memory: "256Mi"
              cpu: "250m"
            limits:
              memory: "512Mi"
              cpu: "500m"
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
      initContainers:
        - name: init-container1
          image:
            repository: "my-registry/init-container1"
            tag: "1.0.0"
            pullPolicy: IfNotPresent
            pullSecrets:
              - my-secret
          envs:
            - name: LOG_LEVEL
              value: INFO
          securityContext:
            capabilities:
              add:
                - IPC_LOCK
          resources:
            requests:
              memory: "256Mi"
              cpu: "250m"
            limits:
              memory: "512Mi"
              cpu: "500m"
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
        - name: init-container2
          image:
            repository: "my-registry/init-container2"
            tag: "1.0.0"
            pullPolicy: IfNotPresent
            pullSecrets:
              - my-secret
          envs:
            - name: LOG_LEVEL
              value: INFO
          resources:
            requests:
              memory: "256Mi"
              cpu: "250m"
            limits:
              memory: "512Mi"
              cpu: "500m"
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
      emptyDirVolume:
        name: "emptyData"
        medium: ""
        sizeLimit: "1Gi"
        mountPath: "/data"
      persistentVolume:
        name: "data"
        size: 1Gi
        accessModes:
          - ReadWriteOnce
        storageClassName: "standard"
        mountPath: "/data"
      externalSecrets:
        - name: my-external-secret
          mountPath: "/external-secrets"
      externalConfigMaps:
        - name: my-external-config
          mountPath: "/external-configs"
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: kubernetes.io/e2e-az-name
                    operator: In
                    values:
                      - e2e-az1
      nodeSelector:
        disktype: ssd
      tolerations:
        - key: "key"
          operator: "Equal"
          value: "value"
          effect: "NoSchedule"
      probes:
        livenessProbe:
          httpGet:
            path: /health/liveness
            port: 80
          initialDelaySeconds: 30
          periodSeconds: 5
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health/readiness
            port: 80
          initialDelaySeconds: 15
          periodSeconds: 5
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /health/startup
            port: 80
          initialDelaySeconds: 15
          periodSeconds: 10
          timeoutSeconds: 1
          successThreshold: 1
          failureThreshold: 3
    service:
      externalTrafficPolicy: Cluster
      externalIPs:
        - 1.1.1.1
      extraAnnotations:
        checksum/values.yaml: "helm/values.yaml"
      type: NodePort
      ports:
        - name: http
          port: 80
          protocol: TCP
          targetPort: 80
          nodePort: 30080
    ingress:
      apiVersion: networking.k8s.io/v1
      kind: Ingress
      extraAnnotations:
        checksum/values.yaml: "helm/values.yaml"
      useTLS: true
      fqdn: my-service.example.com
      paths:
        - path: /
          pathType: Prefix
          servicePort: 80
          serviceName: app1
      ingressClassName: nginx
    configMap:
      mountPath: "/configs"
      files:
        - name: "config.json"
          data: |
            {
              "key": "value"
            }
    secret:
      mountPath: "/secrets"
      data: |
        key1: "value1"
        key2: "value2"
    rbac:
      create: false
      useExistingServiceAccount: "my-existing-service-account"
      legacyToken: true
    monitoring:
      prometheus:
        - name: ServiceMonitor1
          apiVersion: monitoring.coreos.com/v1
          kind: ServiceMonitor
          namespacesSelector:
            - monitoring
          endpoints:
            - port: http
              path: /metrics
              interval: 15s
              scheme: http
        - name: PodMonitor1
          apiVersion: monitoring.coreos.com/v1
          kind: PodMonitor
          namespacesSelector:
            - monitoring
          endpoints:
            - port: http
              path: /metrics
              interval: 15s
              scheme: http
  - name: deployment-app
    app:
      type: deployment
      replicas: 1
      extraLabels:
        app.kubernetes.io/instance: "deployment-app"
      extraAnnotations:
        checksum/values.yaml: "helm/values.yaml"
      containers:
        - name: container1
          image:
            repository: "my-registry/app1"
            tag: "1.0.0"
            pullPolicy: IfNotPresent
            pullSecrets:
              - my-secret
            commands:
              - bash
            args:
              - -c
              - env
          envs:
            - name: LOG_LEVEL
              value: INFO
            - name: SECRET_USERNAME
              valueFrom:
                secretKeyRef:
                  name: my-secret
                  key: username
            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          securityContext:
            capabilities:
              add:
                - IPC_LOCK
          resources:
            requests:
              memory: "256Mi"
              cpu: "250m"
            limits:
              memory: "512Mi"
              cpu: "500m"
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
        - name: container2
          image:
            repository: "my-registry/app2"
            tag: "1.0.0"
            pullPolicy: IfNotPresent
            pullSecrets:
              - my-secret
          envs:
            - name: LOG_LEVEL
              value: INFO
          resources:
            requests:
              memory: "256Mi"
              cpu: "250m"
            limits:
              memory: "512Mi"
              cpu: "500m"
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
      initContainers:
        - name: init-container1
          image:
            repository: "my-registry/init-container1"
            tag: "1.0.0"
            pullPolicy: IfNotPresent
            pullSecrets:
              - my-secret
          envs:
            - name: LOG_LEVEL
              value: INFO
          securityContext:
            capabilities:
              add:
                - IPC_LOCK
          resources:
            requests:
              memory: "256Mi"
              cpu: "250m"
            limits:
              memory: "512Mi"
              cpu: "500m"
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
        - name: init-container2
          image:
            repository: "my-registry/init-container2"
            tag: "1.0.0"
            pullPolicy: IfNotPresent
            pullSecrets:
              - my-secret
          envs:
            - name: LOG_LEVEL
              value: INFO
          resources:
            requests:
              memory: "256Mi"
              cpu: "250m"
            limits:
              memory: "512Mi"
              cpu: "500m"
      emptyDirVolume:
        name: "emptyData"
        medium: ""
        sizeLimit: "1Gi"
        mountPath: "/data"
      persistentVolume:
        name: "data"
        size: 1Gi
        accessModes:
          - ReadWriteOnce
        storageClassName: "standard"
        mountPath: "/data"
      externalSecrets:
        - name: my-external-secret
          mountPath: "/external-secrets"
      externalConfigMaps:
        - name: my-external-config
          mountPath: "/external-configs"
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: kubernetes.io/e2e-az-name
                    operator: In
                    values:
                      - e2e-az1
      nodeSelector:
        disktype: ssd
      tolerations:
        - key: "key"
          operator: "Equal"
          value: "value"
          effect: "NoSchedule"
      probes:
        livenessProbe:
          httpGet:
            path: /health/liveness
            port: 80
          initialDelaySeconds: 30
          periodSeconds: 5
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health/readiness
            port: 80
          initialDelaySeconds: 15
          periodSeconds: 5
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /health/startup
            port: 80
          initialDelaySeconds: 15
          periodSeconds: 10
          timeoutSeconds: 1
          successThreshold: 1
          failureThreshold: 3
    service:
      externalTrafficPolicy: Cluster
      externalIPs:
        - 1.1.1.1
      extraAnnotations:
        checksum/values.yaml: "helm/values.yaml"
      type: ClusterIP
      ports:
        - name: http
          port: 80
          protocol: TCP
          targetPort: 80
    ingress:
      apiVersion: networking.k8s.io/v1
      kind: Ingress
      extraAnnotations:
        checksum/values.yaml: "helm/values.yaml"
      useTLS: true
      fqdn: my-service.example.com
      paths:
        - path: /
          pathType: Prefix
          servicePortName: http
          serviceName: app1
      ingressClassName: nginx
    configMap:
      mountPath: "/configs"
      files:
        - name: "config.json"
          data: |
            {
              "key": "value"
            }
    secret:
      mountPath: "/secrets"
      data: |
        key1: "value1"
        key2: "value2"
    rbac:
      create: true
      rules:
        - apiGroups:
            - ""
          resources:
            - pods
          verbs:
            - get
            - watch
            - list
    monitoring:
      prometheus:
        - name: ServiceMonitor1
          apiVersion: monitoring.coreos.com/v1
          kind: ServiceMonitor
          namespacesSelector:
            - monitoring
          endpoints:
            - port: http
              path: /metrics
              interval: 15s
              scheme: http
        - name: PodMonitor1
          apiVersion: monitoring.coreos.com/v1
          kind: PodMonitor
          namespacesSelector:
            - monitoring
          endpoints:
            - port: http
              path: /metrics
              interval: 15s
              scheme: http
  - name: cronjob-app
    app:
      type: cronjob
      replicas: 1
      extraLabels:
        app.kubernetes.io/instance: "cronjob-app"
      extraAnnotations:
        checksum/values.yaml: "helm/values.yaml"
      cronjob:
        schedule: "*/1 * * * *"
        failedJobsHistoryLimit: 1
        successfulJobsHistoryLimit: 0
        restartPolicy: "OnFailure"
        ttlSecondsAfterFinished: 360
        activeDeadlineSeconds: 650
        backoffLimit: 1
        concurrencyPolicy: "Forbid"
        parallelism: 1
        completions: 1
      containers:
        - name: container1
          image:
            repository: "my-registry/app1"
            tag: "1.0.0"
            pullPolicy: IfNotPresent
            pullSecrets:
              - my-secret
            commands:
              - bash
            args:
              - -c
              - env
          envs:
            - name: LOG_LEVEL
              value: INFO
            - name: SECRET_USERNAME
              valueFrom:
                secretKeyRef:
                  name: my-secret
                  key: username
            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          resources:
            requests:
              memory: "256Mi"
              cpu: "250m"
            limits:
              memory: "512Mi"
              cpu: "500m"
        - name: container2
          image:
            repository: "my-registry/app2"
            tag: "1.0.0"
            pullPolicy: IfNotPresent
            pullSecrets:
              - my-secret
          envs:
            - name: LOG_LEVEL
              value: INFO
          resources:
            requests:
              memory: "256Mi"
              cpu: "250m"
            limits:
              memory: "512Mi"
              cpu: "500m"
      initContainers:
        - name: init-container1
          image:
            repository: "my-registry/init-container1"
            tag: "1.0.0"
            pullPolicy: IfNotPresent
            pullSecrets:
              - my-secret
          envs:
            - name: LOG_LEVEL
              value: INFO
          resources:
            requests:
              memory: "256Mi"
              cpu: "250m"
            limits:
              memory: "512Mi"
              cpu: "500m"
        - name: init-container2
          image:
            repository: "my-registry/init-container2"
            tag: "1.0.0"
            pullPolicy: IfNotPresent
            pullSecrets:
              - my-secret
          envs:
            - name: LOG_LEVEL
              value: INFO
          resources:
            requests:
              memory: "256Mi"
              cpu: "250m"
            limits:
              memory: "512Mi"
              cpu: "500m"
      emptyDirVolume:
        name: "emptyData"
        medium: ""
        sizeLimit: "1Gi"
        mountPath: "/data"
      persistentVolume:
        name: "data"
        size: 1Gi
        accessModes:
          - ReadWriteOnce
        storageClassName: "standard"
        mountPath: "/data"
      externalSecrets:
        - name: my-external-secret
          mountPath: "/external-secrets"
      externalConfigMaps:
        - name: my-external-config
          mountPath: "/external-configs"
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: kubernetes.io/e2e-az-name
                    operator: In
                    values:
                      - e2e-az1
      nodeSelector:
        disktype: ssd
      tolerations:
        - key: "key"
          operator: "Equal"
          value: "value"
          effect: "NoSchedule"
      probes:
        livenessProbe:
          httpGet:
            path: /health/liveness
            port: 80
          initialDelaySeconds: 30
          periodSeconds: 5
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health/readiness
            port: 80
          initialDelaySeconds: 15
          periodSeconds: 5
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /health/startup
            port: 80
          initialDelaySeconds: 15
          periodSeconds: 10
          timeoutSeconds: 1
          successThreshold: 1
          failureThreshold: 3
    configMap:
      mountPath: "/configs"
      files:
        - name: "config.json"
          data: |
            {
              "key": "value"
            }
    secret:
      mountPath: "/secrets"
      data: |
        key1: "value1"
        key2: "value2"
    rbac:
      legacyToken: false
      rules:
        - apiGroups:
            - ""
          resources:
            - pods
          verbs:
            - get
            - watch
            - list
    monitoring:
      prometheus:
        - name: ServiceMonitor1
          apiVersion: monitoring.coreos.com/v1
          kind: ServiceMonitor
          namespacesSelector:
            - monitoring
          endpoints:
            - port: http
              path: /metrics
              interval: 15s
              scheme: http
        - name: PodMonitor1
          apiVersion: monitoring.coreos.com/v1
          kind: PodMonitor
          namespacesSelector:
            - monitoring
          endpoints:
            - port: http
              path: /metrics
              interval: 15s
              scheme: http
  - name: job-app
    app:
      type: job
      replicas: 1
      extraLabels:
        app.kubernetes.io/instance: "job-app"
      extraAnnotations:
        checksum/values.yaml: "helm/values.yaml"
      job:
        restartPolicy: "OnFailure"
        ttlSecondsAfterFinished: 360
        activeDeadlineSeconds: 650
        backoffLimit: 1
        concurrencyPolicy: "Forbid"
        parallelism: 1
        completions: 1
      containers:
        - name: container1
          image:
            repository: "my-registry/app1"
            tag: "1.0.0"
            pullPolicy: IfNotPresent
            pullSecrets:
              - my-secret
            commands:
              - bash
            args:
              - -c
              - env
          envs:
            - name: LOG_LEVEL
              value: INFO
            - name: SECRET_USERNAME
              valueFrom:
                secretKeyRef:
                  name: my-secret
                  key: username
            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          resources:
            requests:
              memory: "256Mi"
              cpu: "250m"
            limits:
              memory: "512Mi"
              cpu: "500m"
        - name: container2
          image:
            repository: "my-registry/app2"
            tag: "1.0.0"
            pullPolicy: IfNotPresent
            pullSecrets:
              - my-secret
          envs:
            - name: LOG_LEVEL
              value: INFO
          resources:
            requests:
              memory: "256Mi"
              cpu: "250m"
            limits:
              memory: "512Mi"
              cpu: "500m"
      initContainers:
        - name: init-container1
          image:
            repository: "my-registry/init-container1"
            tag: "1.0.0"
            pullPolicy: IfNotPresent
            pullSecrets:
              - my-secret
          envs:
            - name: LOG_LEVEL
              value: INFO
          resources:
            requests:
              memory: "256Mi"
              cpu: "250m"
            limits:
              memory: "512Mi"
              cpu: "500m"
        - name: init-container2
          image:
            repository: "my-registry/init-container2"
            tag: "1.0.0"
            pullPolicy: IfNotPresent
            pullSecrets:
              - my-secret
          envs:
            - name: LOG_LEVEL
              value: INFO
          resources:
            requests:
              memory: "256Mi"
              cpu: "250m"
            limits:
              memory: "512Mi"
              cpu: "500m"
      emptyDirVolume:
        name: "emptyData"
        medium: ""
        sizeLimit: "1Gi"
        mountPath: "/data"
      persistentVolume:
        name: "data"
        size: 1Gi
        accessModes:
          - ReadWriteOnce
        storageClassName: "standard"
        mountPath: "/data"
      externalSecrets:
        - name: my-external-secret
          mountPath: "/external-secrets"
      externalConfigMaps:
        - name: my-external-config
          mountPath: "/external-configs"
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: kubernetes.io/e2e-az-name
                    operator: In
                    values:
                      - e2e-az1
      nodeSelector:
        disktype: ssd
      tolerations:
        - key: "key"
          operator: "Equal"
          value: "value"
          effect: "NoSchedule"
      probes:
        livenessProbe:
          httpGet:
            path: /health/liveness
            port: 80
          initialDelaySeconds: 30
          periodSeconds: 5
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health/readiness
            port: 80
          initialDelaySeconds: 15
          periodSeconds: 5
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /health/startup
            port: 80
          initialDelaySeconds: 15
          periodSeconds: 10
          timeoutSeconds: 1
          successThreshold: 1
          failureThreshold: 3
    configMap:
      mountPath: "/configs"
      files:
        - name: "config.json"
          data: |
            {
              "key": "value"
            }
    secret:
      mountPath: "/secrets"
      data: |
        key1: "value1"
        key2: "value2"
    rbac:
      legacyToken: false
      rules:
        - apiGroups:
            - ""
          resources:
            - pods
          verbs:
            - get
            - watch
            - list
    monitoring:
      prometheus:
        - name: ServiceMonitor1
          apiVersion: monitoring.coreos.com/v1
          kind: ServiceMonitor
          namespacesSelector:
            - monitoring
          endpoints:
            - port: http
              path: /metrics
              interval: 15s
              scheme: http
        - name: PodMonitor1
          apiVersion: monitoring.coreos.com/v1
          kind: PodMonitor
          namespacesSelector:
            - monitoring
          endpoints:
            - port: http
              path: /metrics
              interval: 15s
              scheme: http
