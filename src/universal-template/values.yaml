# An example of a fully described value file for describing the simplest release
# The file is divided into sections:
# - tests - the section describes the tests that will be run after the release
# - app - the section describes the applications that will be deployed (Deployment, StatefulSet, Job, CronJob)
# - service - the section describes the service that will be deployed
# - ingress - the section describes the ingress that will be deployed
# - configMap - the section describes the configmap that will be deployed
# - secret - the section describes the secret that will be deployed
# - rbac - the section describes the rbac that will be deployed
---
# Anchors with ports of your services can be installed here for reuse
# service_port_http: &service_port_http 80
# service_metrics_port: &service_metrics_port 9090

# Applications - are a logical group for a microservice that includes
# App (Deployment, StatefulSet, Job, CronJob), Service, Ingress, ConfigMap, Secret
applications: []
# applications:
#   - name: app1
#     app:
#       # Type of application (can be Deployment, StatefulSet, Job, CronJob)
#       type: deployment
#       replicas: 1
#       extraLabels:
#         app.kubernetes.io/instance: "app1"
#       extraAnnotations:
#         checksum/values.yaml: "helm/values.yaml"
#       # Network policy for the application
#       networkPolicy:
#         ingress:
#           - from:
#               - podSelector:
#                   matchLabels:
#                     app: my-app
#             ports:
#               - protocol: TCP
#                 port: 80
#         egress:
#           - to:
#               - podSelector:
#                   matchLabels:
#                     app: my-app
#             ports:
#               - protocol: TCP
#                 port: 80
#       # Containers in the pod
#       containers:
#         - name: container1
#           image:
#             repository: "my-registry/app1"
#             tag: "1.0.0"
#             pullPolicy: IfNotPresent
#             pullSecrets:
#               - my-secret
#             commands:
#               - bash
#             args:
#               - -c
#               - env
#           envs:
#             - name: LOG_LEVEL
#               value: INFO
#             - name: SECRET_USERNAME
#               valueFrom:
#                 secretKeyRef:
#                   name: my-secret
#                   key: username
#             - name: NAMESPACE
#               valueFrom:
#                 fieldRef:
#                   fieldPath: metadata.namespace
#           securityContext:
#             capabilities:
#               add:
#                 - IPC_LOCK
#           resources:
#             requests:
#               memory: "256Mi"
#               cpu: "250m"
#             limits:
#               memory: "512Mi"
#               cpu: "500m"
#           ports:
#             - name: http
#               containerPort: 80
#               protocol: TCP
#       initContainers:
#         - name: init-container1
#           image:
#             repository: "my-registry/init-container1"
#             tag: "1.0.0"
#             pullPolicy: IfNotPresent
#             pullSecrets:
#               - my-secret
#           envs:
#             - name: LOG_LEVEL
#               value: INFO
#           capabilities:
#             add:
#               - IPC_LOCK
#           resources:
#             requests:
#               memory: "256Mi"
#               cpu: "250m"
#             limits:
#               memory: "512Mi"
#               cpu: "500m"
#       emptyDirVolume:
#         name: "data"
#         medium: ""
#         sizeLimit: "1Gi"
#         mountPath: "/data"
#       persistentVolume:
#         name: "data"
#         size: 1Gi
#         accessModes:
#           - ReadWriteOnce
#         storageClassName: "standard"
#         mountPath: "/data"
#       # Mounting external secrets and configmaps (Secrets and ConfigMaps deployed in namespace not by this helm-chart)
#       externalSecrets:
#         - name: my-secret
#           mountPath: "/external-secrets"
#       externalConfigMaps:
#         - name: my-config
#           mountPath: "/external-configs"
#       affinity:
#         nodeAffinity:
#           requiredDuringSchedulingIgnoredDuringExecution:
#             nodeSelectorTerms:
#               - matchExpressions:
#                   - key: kubernetes.io/e2e-az-name
#                     operator: In
#                     values:
#                       - e2e-az1
#       nodeSelector:
#         disktype: ssd
#       tolerations:
#         - key: "key"
#           operator: "Equal"
#           value: "value"
#           effect: "NoSchedule"
#       probes:
#         livenessProbe:
#           httpGet:
#             path: /health/liveness
#             port: 80
#           initialDelaySeconds: 30
#           periodSeconds: 5
#           timeoutSeconds: 5
#           successThreshold: 1
#           failureThreshold: 3
#         readinessProbe:
#           httpGet:
#             path: /health/readiness
#             port: 80
#           initialDelaySeconds: 15
#           periodSeconds: 5
#           timeoutSeconds: 5
#           successThreshold: 1
#           failureThreshold: 3
#         startupProbe:
#           httpGet:
#             path: /health/startup
#             port: 80
#           initialDelaySeconds: 15
#           periodSeconds: 10
#           timeoutSeconds: 1
#           successThreshold: 1
#           failureThreshold: 3
#       # Only for batch applications and cronjobs
#       cronjob:
#         schedule: "*/1 * * * *"
#         failedJobsHistoryLimit: 1
#         successfulJobsHistoryLimit: 0
#         restartPolicy: "OnFailure"
#         ttlSecondsAfterFinished: 360
#         activeDeadlineSeconds: 650
#         backoffLimit: 1
#         concurrencyPolicy: "Forbid"
#         parallelism: 1
#         completions: 1
#       job:
#         restartPolicy: "OnFailure"
#         ttlSecondsAfterFinished: 360
#         activeDeadlineSeconds: 650
#         backoffLimit: 1
#         concurrencyPolicy: "Forbid"
#         parallelism: 1
#         completions: 1
#
#     service:
#       externalTrafficPolicy: Cluster
#       externalIPs:
#         - 1.1.1.1
#       extraAnnotations:
#         checksum/values.yaml: "helm/values.yaml"
#       # Type of service (can be ClusterIP, NodePort, LoadBalancer)
#       type: NodePort
#       ports:
#         - name: http
#           port: 80
#           protocol: TCP
#           targetPort: 80
#           nodePort: 30080
#
#     ingress:
#       apiVersion: networking.k8s.io/v1
#       kind: Ingress
#       extraAnnotations:
#         checksum/values.yaml: "helm/values.yaml"
#       useTLS: true
#       fqdn: my-service.example.com
#       paths:
#         - path: /
#           pathType: Prefix
#           servicePort: 80 # Conflict with servicePortName if both are set will be used servicePortName.
#           servicePortName: http # Conflict with servicePort if both are set will be used servicePortName.
#           serviceName: app1
#       ingressClassName: nginx

#     # Description of the ConfigMap
#     # The contents of the config can be set via
#     # `--set-file "applications[0].configMap[0].data"="config.json"`
#     # `mountPath` - the path in the container where all configs will be mapped
#     # `files[0].name` - the name of the file in the container
#     # `files[0].data` - the config body is set via the --set-file parameter
#     configMap:
#       mountPath: "/configs"
#       files:
#         - name: "config.json"
#           data: {}

#     # Description of the Secret
#     secret:
#       mountPath: "/secrets"
#       data: |
#         username: admin
#         password: admin

#     # Description of the RBAC
#     rbac:
#       create: true
#       legacyToken: true
#       useExistingServiceAccount: my-existing-service-account
#       rules:
#         - apiGroups:
#             - ""
#           resources:
#             - pods
#           verbs:
#             - get
#             - watch
#             - list

#     # Description of the Monitoring
#     # The monitoring section is used to create a ServiceMonitor for Prometheus
#     monitoring:
#       prometheus:
#         - name: ServiceMonitor1
#           apiVersion: monitoring.coreos.com/v1
#           kind: ServiceMonitor
#           # Don't set the namespace if you want to use the release namespace
#           namespacesSelector:
#             - monitoring
#           endpoints:
#             - port: http
#               path: /metrics
#               interval: 15s
#               scheme: http
#         - name: PodMonitor1
#           apiVersion: monitoring.coreos.com/v1
#           kind: PodMonitor
#           namespacesSelector:
#             - monitoring
#           endpoints:
#             - port: http
#               path: /metrics
#               interval: 15s
#               scheme: http
