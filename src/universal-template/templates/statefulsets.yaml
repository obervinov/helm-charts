{{- if .Values.applications                                                               }}
{{-   range .Values.applications                                                          }}
{{-     if .app                                                                           }}
{{-       if eq .app.type "statefulset"                                                   }}
{{-         $configMap          := .configMap                                             }}
{{-         $secret             := .secret                                                }}
{{-         $service            := .service                                               }}
{{-         $name               := .name                                                  }}
{{-         $app                := .app                                                   }}
{{-         $namespace          := $.Release.Namespace                                    }}
{{-         $fullName           := include "universal-template.fullName" (list $ . $name) }}
{{-         $extraLabels        := $app.extraLabels                                       }}
{{-         $replicas           := $app.replicas                                          }}
{{-         $extraAnnotations   := $app.extraAnnotations                                  }}
{{-         $initContainers     := $app.initContainers                                    }}
{{-         $containers         := $app.containers                                        }}
{{-         $image              := $app.image                                             }}
{{-         $persistentVolume   := $app.persistentVolume                                  }}
{{-         $emptyDirVolume     := $app.emptyDirVolume                                    }}
{{-         $tolerations        := $app.tolerations                                       }}
{{-         $affinity           := $app.affinity                                          }}
{{          $nodeSelector       := $app.nodeSelector                                      }}
{{          $externalSecrets    := $app.externalSecrets                                   }}
{{          $externalConfigMaps := $app.externalConfigMaps                                }}
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ $fullName }}
  namespace: {{ $namespace }}
  labels:
    {{- include "universal-template.labels" $ | nindent 4 }}
    {{- include "universal-template.selectorLabels" (list $fullName )  | nindent 4 }}
    {{- if $extraLabels }}
    {{-   toYaml $extraLabels | nindent 4 }}
    {{- end }}
spec:
  serviceName: {{ $fullName }}
  replicas: {{ default 1 $replicas }}
  selector:
    matchLabels: {{- include "universal-template.selectorLabels" (list $fullName )  | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "universal-template.labels" $ | nindent 8 }}
        {{- include "universal-template.selectorLabels" (list $fullName )  | nindent 8 }}
        {{- if $extraLabels }}
        {{-   toYaml $extraLabels | nindent 8 }}
        {{- end }}
      {{- if $extraAnnotations }}
      annotations: {{- toYaml $extraAnnotations | nindent 8 }}
      {{- end }}
    spec:
      {{- if $image.pullSecrets }}
      imagePullSecrets:
      {{-   range $image.pullSecrets }}
        - name: {{ . }}
      {{-   end }}
      {{- end }}
      {{- if $initContainers }}
      initContainers:
      {{-   range $initContainers }}
      {{-     $initContainerData := dict "app" . "name" .name "configMap" $configMap "secret" $secret "externalSecrets" $externalSecrets "externalConfigMaps" $externalConfigMaps "persistentVolume" $persistentVolume "emptyDirVolume" $emptyDirVolume }}
      {{- include "universal-template.container.template" $initContainerData | nindent 8 }}
      {{-   end }}
      {{- end }}
      containers:
      {{- range $containers }}
      {{- $containerData := dict "app" . "name" .name "configMap" $configMap "secret" $secret "externalSecrets" $externalSecrets "externalConfigMaps" $externalConfigMaps "service" $service "persistentVolume" $persistentVolume "emptyDirVolume" $emptyDirVolume }}
      {{- include "universal-template.container.template" $containerData | nindent 8 }}
      {{- end }}
      {{- if or $configMap $secret $persistentVolume $emptyDirVolume $externalSecrets $externalConfigMaps }}
      {{-   $volumesData := dict "targetType" "statefulset" "fullName" $fullName "configMap" $configMap "secret" $secret "externalSecrets" $externalSecrets "externalConfigMaps" $externalConfigMaps "persistentVolume" $persistentVolume "emptyDirVolume" $emptyDirVolume }}
      volumes: {{-   include "universal-template.volumes.template" $volumesData | nindent 8 }}
      {{- end }}
      {{- if $tolerations }}
      tolerations: {{- toYaml $tolerations | nindent 8 }}
      {{- end }}
      {{- if $affinity }}
      affinity: {{- toYaml $affinity | nindent 8 }}
      {{- end }}
      {{- if $nodeSelector }}
      nodeSelector: {{- toYaml $nodeSelector | nindent 8 }}
      {{- end }}
  {{- if $persistentVolume }}
  volumeClaimTemplates:
    - apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: {{ $persistentVolume.name }}
      spec:
        accessModes:
        - {{ $persistentVolume.accessModes }}
        resources:
          requests:
            storage: {{ $persistentVolume.size }}
        storageClassName: {{ $persistentVolume.storageClassName }}
        volumeMode: {{ default "Filesystem" $persistentVolume.volumeMode }}
  {{- end }}
...
{{-       end }}
{{-     end }}
{{-   end }}
{{- end }}